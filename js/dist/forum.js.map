{"version":3,"file":"forum.js","mappings":"MACA,IAAIA,EAAsB,CCA1BA,EAAyBC,IACxB,IAAIC,EAASD,GAAUA,EAAOE,WAC7B,IAAOF,EAAiB,QACxB,IAAM,EAEP,OADAD,EAAoBI,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,GCLRF,EAAwB,CAACM,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXP,EAAoBS,EAAEF,EAAYC,KAASR,EAAoBS,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3ER,EAAwB,CAACc,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFf,EAAyBM,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,M,+BCLvD,MAAM,EAA+BC,OAAOC,KAAKC,OAAO,a,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,iBCAlD,EAA+BF,OAAOC,KAAKC,OAAO,iC,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,gC,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,4B,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,6B,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,gC,aCSxDC,IAAAA,aAAAA,IAAqB,aAAa,WAChC,IAAMC,IAAcC,OAAOF,IAAAA,KAAAA,0BAE3BG,EAAAA,EAAAA,QAAOC,IAAAA,UAAwB,SAAS,SAAUC,GAChD,IAAMC,EAAUN,IAAAA,MAAAA,UAAoB,aAAaO,OAAOC,SAClDC,EAAeH,EAAQI,OAAOJ,EAAQK,QAAQL,EAAQM,MAAK,SAACC,GAAD,MAAkB,WAAXA,EAAEC,SAAqB,GAE/FR,EAAQS,OAAON,GAAcO,SAAQ,YAAoB,IAAjBF,EAAiB,EAAjBA,KAAMG,EAAW,EAAXA,KACxCC,EAAY,sCAAsCJ,EAGlDb,GAAsB,WAATa,IACfI,GAAa,iBAGfb,EAAMc,IACJL,EACA,SAAKI,UAAS,8CAAgDJ,GAC5D,EAAC,IAAD,CAAaI,UAAWA,EAAWD,KAAMA,EAAMG,KAAI,SAAWN,GAC3Dd,IAAAA,WAAAA,MAAA,+BAAoDc,EAApD,UAAmE,CAClEO,SAAUrB,IAAAA,WAAAA,MAAA,6BAAkDc,cAQpEb,KACFqB,EAAAA,EAAAA,UAASC,IAAAA,UAAuB,QAAQ,SAAUC,EAAMC,GACtD,IAAMC,EAAQF,EAAKC,GAEnB,OAAO,EAAC,IAAD,CAASE,KAAMC,GAAAA,CAAYF,EAAMG,SAAS,KAAMH,OAGzDvB,EAAAA,EAAAA,QAAOC,IAAAA,UAAwB,QAAQ,SAAU0B,GAC/CA,EAAKC,MAAMb,WAAa,+BAI5Bf,EAAAA,EAAAA,QAAO6B,IAAAA,UAAuB,UAAU,SAAU3B,GAYhD,OAVM4B,KAAKF,MAAMG,QAAYD,KAAKF,MAAMI,UACtC9B,EAAMc,IACJ,gBACA,aACE,WAAInB,IAAAA,WAAAA,MAAqB,0CAE3B,IAIGK,S","sources":["webpack://@fof/oauth/webpack/bootstrap","webpack://@fof/oauth/webpack/runtime/compat get default export","webpack://@fof/oauth/webpack/runtime/define property getters","webpack://@fof/oauth/webpack/runtime/hasOwnProperty shorthand","webpack://@fof/oauth/webpack/runtime/make namespace object","webpack://@fof/oauth/external root \"flarum.core.compat['forum/app']\"","webpack://@fof/oauth/external root \"flarum.core.compat['common/extend']\"","webpack://@fof/oauth/external root \"flarum.core.compat['forum/components/LogInButtons']\"","webpack://@fof/oauth/external root \"flarum.core.compat['forum/components/LogInButton']\"","webpack://@fof/oauth/external root \"flarum.core.compat['common/utils/extractText']\"","webpack://@fof/oauth/external root \"flarum.core.compat['common/components/Tooltip']\"","webpack://@fof/oauth/external root \"flarum.core.compat['forum/components/SignUpModal']\"","webpack://@fof/oauth/./src/forum/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/LogInButtons'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/LogInButton'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/extractText'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Tooltip'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/SignUpModal'];","import app from 'flarum/forum/app';\n\nimport { extend, override } from 'flarum/common/extend';\nimport LogInButtons from 'flarum/forum/components/LogInButtons';\nimport LogInButton from 'flarum/forum/components/LogInButton';\nimport extractText from 'flarum/common/utils/extractText';\nimport Tooltip from 'flarum/common/components/Tooltip';\nimport SignUpModal from 'flarum/forum/components/SignUpModal';\n\napp.initializers.add('fof/oauth', () => {\n  const onlyIcons = !!Number(app.data['fof-oauth.only_icons']);\n\n  extend(LogInButtons.prototype, 'items', function (items) {\n    const buttons = app.forum.attribute('fof-oauth').filter(Boolean);\n    const googleButton = buttons.splice(buttons.indexOf(buttons.find((b) => b.name === 'google')), 1);\n\n    buttons.concat(googleButton).forEach(({ name, icon }) => {\n      let className = `Button FoFLogInButton LogInButton--${name}`;\n\n      // Google branding does not allow inline icon, so we'll keep the full button\n      if (onlyIcons && name !== 'google') {\n        className += ' Button--icon';\n      }\n\n      items.add(\n        name,\n        <div className={`LogInButtonContainer LogInButtonContainer--${name}`}>\n          <LogInButton className={className} icon={icon} path={`/auth/${name}`}>\n            {app.translator.trans(`fof-oauth.forum.log_in.with_${name}_button`, {\n              provider: app.translator.trans(`fof-oauth.forum.providers.${name}`),\n            })}\n          </LogInButton>\n        </div>\n      );\n    });\n  });\n\n  if (onlyIcons) {\n    override(LogInButton.prototype, 'view', function (orig, vnode) {\n      const child = orig(vnode);\n\n      return <Tooltip text={extractText(child.children[1])}>{child}</Tooltip>;\n    });\n\n    extend(LogInButtons.prototype, 'view', function (vdom) {\n      vdom.attrs.className += ' FoFLogInButtons--icons';\n    });\n  }\n\n  extend(SignUpModal.prototype, 'fields', function (items) {\n    // If a suggested username was not provided by the OAuth service, display some help text to the user.\n    if (!!this.attrs.token && !!!this.attrs.username) {\n      items.add(\n        'username-help',\n        <div>\n          <p>{app.translator.trans('fof-oauth.forum.signup.username_help')}</p>\n        </div>,\n        35\n      );\n    }\n\n    return items;\n  });\n});\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","app","onlyIcons","Number","extend","LogInButtons","items","buttons","filter","Boolean","googleButton","splice","indexOf","find","b","name","concat","forEach","icon","className","add","path","provider","override","LogInButton","orig","vnode","child","text","extractText","children","vdom","attrs","SignUpModal","this","token","username"],"sourceRoot":""}